#!/usr/bin/env node
import { connect } from 'node:tls'
import { argv } from 'node:process'

import { WebSocketServer } from 'ws'

function show_usage_then_exit() {
  console.error('websockify.js source_port target_addr target_port')
  process.exit(1)
}

if (argv.length !== 5) {
  show_usage_then_exit()
}
const source_port = Number(argv[2])
const target_host = argv[3]
const target_port = Number(argv[4])
if (Number.isNaN(source_port) || Number.isNaN(target_port)) {
  show_usage_then_exit()
}

console.log(
  `Proxying ws://localhost:${source_port}/ to tls://${target_host}:${target_port}`,
)

const wss = new WebSocketServer({ port: source_port })

wss.on('connection', (client, req) => {
  console.log(req.url)

  const log = (msg) => console.log(`${client._socket.remoteAddress}:\t${msg}`)
  log('WebSocket connection')
  log(`Version ${client.protocolVersion}, subprotocol: ${client.protocol}`)

  const target = connect(target_port, target_host, () =>
    log('connected to target'),
  )
  target.on('data', (data) => {
    try {
      client.send(data)
    } catch (e) {
      log('Client closed, cleaning up target')
      target.end()
    }
  })
  target.on('end', () => {
    log('target disconnected')
    client.terminate()
  })
  target.on('error', () => {
    log('target connection error')
    target.end()
    client.terminate()
  })

  client.on('message', (msg, _isBinary) => target.write(msg))
  client.on('close', (code, reason) => {
    log(`WebSocket client disconnected: ${code} [${reason}]`)
    target.end()
  })
  client.on('error', (a) => {
    log(`WebSocket client error: ${a}`)
    target.end()
  })
})
